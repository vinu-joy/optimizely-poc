import { gql, type GraphQLClient } from 'graphql-request'
import type * as Types from './graphql'


export function getContentType(client: GraphQLClient, variables: Types.getContentTypeQueryVariables) : Promise<Types.getContentTypeQuery>
{
  const query = gql`query getContentType($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items { _metadata { types } } } }`
  return client.request<Types.getContentTypeQuery, Types.getContentTypeQueryVariables>(query, variables)
}
export function getContentByPath(client: GraphQLClient, variables: Types.getContentByPathQueryVariables) : Promise<Types.getContentByPathQuery>
{
  const query = gql`query getContentByPath($path: String!, $version: String, $locale: [Locales!], $domain: String) { content: _Content( where: {_metadata: {url: {default: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}} locale: $locale ) { total items { ...PageData ...BlankExperienceData ...DestinationPageTypeData ...ExperienceOneData ...PrideOfPlaceTypeData ...HomePageTypeData } } } fragment BlankExperienceData on BlankExperience { BlankExperienceSeoSettings { ...PageSeoSettingsPropertyData } ...ExperienceData } fragment DestinationPageTypeData on DestinationPageType { DestinationID ...ExperienceData } fragment ExperienceOneData on ExperienceOne { Title ...ExperienceData } fragment PrideOfPlaceTypeData on PrideOfPlaceType { Title description ImageList { ...LinkItemData } ...ExperienceData } fragment HomePageTypeData on HomePageType { Block { ...HomeSectionOneTypePropertyData } } fragment PageData on _IContent { ...IContentData } fragment PageSeoSettingsPropertyData on PageSeoSettingsProperty { MetaTitle MetaDescription SharingImage { ...ReferenceData } GraphType } fragment ExperienceData on _IExperience { composition { ...CompositionData } } fragment ReferenceData on ContentReference { key url { ...LinkData } } fragment LinkData on ContentUrl { base hierarchical default } fragment CompositionData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } ... on ICompositionStructureNode { nodes @recursive(depth: 10) { name: displayName } } ... on ICompositionElementNode { element { ...ElementData ...DetailHeaderData ...ExperienceElementTestData ...ImageElementData ...TitleOneData ...VideoElementData } } } fragment DetailHeaderData on DetailHeader { propertyName propertyLocation } fragment ExperienceElementTestData on ExperienceElementTest { title } fragment ImageElementData on ImageElement { image { ...ReferenceData } altText } fragment TitleOneData on TitleOne { Text } fragment VideoElementData on VideoElement { video { ...ReferenceData } altText cover { ...ReferenceData } } fragment ElementData on _IElement { ...IElementData } fragment IElementData on _IElement { _metadata { ...IContentInfo } _type: __typename } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment LinkItemData on Link { title text target url { ...LinkData } } fragment HomeSectionOneTypePropertyData on HomeSectionOneTypeProperty { MainTitle SecondaryTitle Description BannerImage { ...LinkData } } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename }`
  return client.request<Types.getContentByPathQuery, Types.getContentByPathQueryVariables>(query, variables)
}
export function getContentById(client: GraphQLClient, variables: Types.getContentByIdQueryVariables) : Promise<Types.getContentByIdQuery>
{
  const query = gql`query getContentById($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items { ...BlockData ...PageData ...BasicFooterAldarData ...CardData ...FooterAldarBlockData ...FooterSectionData ...HeaderDetailData ...HeaderLogoData ...HomeSectionOneTypeData ...NavigationBlockData ...PageSeoSettingsData ...PropertyDetailData ...SimpleCardData ...BlankExperienceData ...DestinationPageTypeData ...ExperienceOneData ...PrideOfPlaceTypeData ...HomePageTypeData } } } fragment BasicFooterAldarData on BasicFooterAldar { FooterLinks { ...LinkItemData } } fragment CardData on Card { _metadata { key } } fragment FooterAldarBlockData on FooterAldarBlock { FooterSection { SectionTitle SectionLinks { title text url { default } } } } fragment FooterSectionData on FooterSection { SectionTitle SectionLinks { ...LinkItemData } } fragment HeaderDetailData on HeaderDetail { propertyName propertyLocation propertyType } fragment HeaderLogoData on HeaderLogo { _metadata { key } } fragment HomeSectionOneTypeData on HomeSectionOneType { MainTitle SecondaryTitle Description BannerImage { ...LinkData } } fragment NavigationBlockData on NavigationBlock { headerLogo { url { default } } headerItems { title url { base default } } } fragment PageSeoSettingsData on PageSeoSettings { MetaTitle MetaDescription SharingImage { ...ReferenceData } GraphType } fragment PropertyDetailData on PropertyDetail { propertyId propertyName propertyLocation } fragment SimpleCardData on SimpleCard { image { ...LinkData } } fragment BlankExperienceData on BlankExperience { BlankExperienceSeoSettings { ...PageSeoSettingsPropertyData } ...ExperienceData } fragment DestinationPageTypeData on DestinationPageType { DestinationID ...ExperienceData } fragment ExperienceOneData on ExperienceOne { Title ...ExperienceData } fragment PrideOfPlaceTypeData on PrideOfPlaceType { Title description ImageList { ...LinkItemData } ...ExperienceData } fragment HomePageTypeData on HomePageType { Block { ...HomeSectionOneTypePropertyData } } fragment BlockData on _IContent { ...IContentData } fragment PageData on _IContent { ...IContentData } fragment LinkItemData on Link { title text target url { ...LinkData } } fragment LinkData on ContentUrl { base hierarchical default } fragment ReferenceData on ContentReference { key url { ...LinkData } } fragment PageSeoSettingsPropertyData on PageSeoSettingsProperty { MetaTitle MetaDescription SharingImage { ...ReferenceData } GraphType } fragment ExperienceData on _IExperience { composition { ...CompositionData } } fragment CompositionData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } ... on ICompositionStructureNode { nodes @recursive(depth: 10) { name: displayName } } ... on ICompositionElementNode { element { ...ElementData ...DetailHeaderData ...ExperienceElementTestData ...ImageElementData ...TitleOneData ...VideoElementData } } } fragment DetailHeaderData on DetailHeader { propertyName propertyLocation } fragment ExperienceElementTestData on ExperienceElementTest { title } fragment ImageElementData on ImageElement { image { ...ReferenceData } altText } fragment TitleOneData on TitleOne { Text } fragment VideoElementData on VideoElement { video { ...ReferenceData } altText cover { ...ReferenceData } } fragment ElementData on _IElement { ...IElementData } fragment IElementData on _IElement { _metadata { ...IContentInfo } _type: __typename } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment HomeSectionOneTypePropertyData on HomeSectionOneTypeProperty { MainTitle SecondaryTitle Description BannerImage { ...LinkData } } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename }`
  return client.request<Types.getContentByIdQuery, Types.getContentByIdQueryVariables>(query, variables)
}

